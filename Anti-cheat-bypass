-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Local Player
local player = Players.LocalPlayer
if not player then
    warn("Player not found")
    return
end

local character = player.Character
if not character then
    character = player.CharacterAdded:Wait()
end

local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

if not humanoidRootPart or not humanoid then
    warn("Character parts not found.")
    return
end

print("Script started successfully")

-- Variables
local flying = false
local noclipping = false
local speed = 50
local mobileMovement = {x = 0, y = 0}
local control = {forward = 0, backward = 0, left = 0, right = 0, up = 0, down = 0}

local flyConnection
local noclipConnection
local antiPullbackConnection

local lastPosition = humanoidRootPart.Position
local positionHistory = {}
local maxHistorySize = 50
local pullbackThreshold = 0.8
local stuckCounter = 0
local lastSafePosition = humanoidRootPart.CFrame
local pullbackDetectionSpeed = 2

-- GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "NoclipFlyGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = player:WaitForChild("PlayerGui", 5)

-- ===== VIRTUAL JOYSTICK =====
local JoystickBG = Instance.new("Frame")
JoystickBG.Name = "JoystickBG"
JoystickBG.Size = UDim2.new(0, 120, 0, 120)
JoystickBG.Position = UDim2.new(0, 20, 1, -140)
JoystickBG.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
JoystickBG.BackgroundTransparency = 0.6
JoystickBG.BorderSizePixel = 0
JoystickBG.Parent = ScreenGui

local joyCorner = Instance.new("UICorner")
joyCorner.CornerRadius = UDim.new(1, 0)
joyCorner.Parent = JoystickBG

local JoystickStick = Instance.new("Frame")
JoystickStick.Name = "JoystickStick"
JoystickStick.Size = UDim2.new(0, 50, 0, 50)
JoystickStick.Position = UDim2.new(0.5, -25, 0.5, -25)
JoystickStick.BackgroundColor3 = Color3.fromRGB(100, 150, 255)
JoystickStick.BorderSizePixel = 0
JoystickStick.Parent = JoystickBG

local stickCorner = Instance.new("UICorner")
stickCorner.CornerRadius = UDim.new(1, 0)
stickCorner.Parent = JoystickStick

local joystickCenter = JoystickBG.AbsolutePosition + JoystickBG.AbsoluteSize / 2
local joystickRadius = 50

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 160, 0, 140)
Frame.Position = UDim2.new(1, -170, 0, 10)
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Frame.BorderSizePixel = 0
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 30)
Title.BackgroundTransparency = 1
Title.Text = "Fly & Noclip"
Title.TextColor3 = Color3.fromRGB(200, 200, 200)
Title.TextSize = 11
Title.Font = Enum.Font.GothamBold
Title.TextWrapped = true
Title.Parent = Frame

local FlyButton = Instance.new("TextButton")
FlyButton.Size = UDim2.new(0.85, 0, 0, 28)
FlyButton.Position = UDim2.new(0.075, 0, 0.25, 0)
FlyButton.BackgroundColor3 = Color3.fromRGB(50, 100, 255)
FlyButton.Text = "Fly: OFF"
FlyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
FlyButton.TextSize = 11
FlyButton.Font = Enum.Font.GothamBold
FlyButton.Parent = Frame

-- Mobile Fly Button
local MobileFlyButton = Instance.new("TextButton")
MobileFlyButton.Name = "MobileFlyButton"
MobileFlyButton.Size = UDim2.new(0, 60, 0, 60)
MobileFlyButton.Position = UDim2.new(1, -80, 0.5, -30)
MobileFlyButton.BackgroundColor3 = Color3.fromRGB(50, 100, 255)
MobileFlyButton.Text = "FLY"
MobileFlyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MobileFlyButton.TextSize = 14
MobileFlyButton.Font = Enum.Font.GothamBold
MobileFlyButton.Parent = ScreenGui

local flyBtnCorner = Instance.new("UICorner")
flyBtnCorner.CornerRadius = UDim.new(1, 0)
flyBtnCorner.Parent = MobileFlyButton

local NoclipButton = Instance.new("TextButton")
NoclipButton.Size = UDim2.new(0.85, 0, 0, 28)
NoclipButton.Position = UDim2.new(0.075, 0, 0.48, 0)
NoclipButton.BackgroundColor3 = Color3.fromRGB(100, 50, 255)
NoclipButton.Text = "Noclip: OFF"
NoclipButton.TextColor3 = Color3.fromRGB(255, 255, 255)
NoclipButton.TextSize = 11
NoclipButton.Font = Enum.Font.GothamBold
NoclipButton.Parent = Frame

local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(0.85, 0, 0, 25)
StatusLabel.Position = UDim2.new(0.075, 0, 0.71, 0)
StatusLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
StatusLabel.Text = "Status: Ready"
StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
StatusLabel.TextSize = 9
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.Parent = Frame

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 6)
corner.Parent = Frame
for _, btn in pairs({FlyButton, NoclipButton, StatusLabel}) do
    corner:Clone().Parent = btn
end

-- Functions
local function detectPullback()
    if not humanoidRootPart then return false end
    
    local currentPos = humanoidRootPart.Position
    local distance = (currentPos - lastPosition).Magnitude
    local moveDir = humanoid.MoveDirection + Vector3.new(mobileMovement.x, 0, mobileMovement.y)
    local isMoving = moveDir.Magnitude > 0.1
    
    -- ตรวจหาการดึงกลับรุนแรง
    if distance > pullbackThreshold and isMoving then
        return true
    end
    
    -- ตรวจหาการติดค้าง (เคลื่อนที่แต่ไม่ขยับ)
    if isMoving and distance < 0.01 then
        stuckCounter = stuckCounter + 1
        if stuckCounter > 1 then
            return true
        end
    else
        stuckCounter = 0
    end
    
    -- ตรวจหาการดึงกลับแบบช้าๆ
    if distance > 3 and not isMoving then
        return true
    end
    
    lastPosition = currentPos
    return false
end

local function resetHumanoidState()
    if not humanoid or not humanoidRootPart then return end
    
    humanoid.PlatformStand = false
    humanoid.Sit = false
    humanoid:ChangeState(Enum.HumanoidStateType.Running)
    
    humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
    humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
    
    task.wait(0.1)
end

local function startFly()
    if flying or not humanoidRootPart or humanoid.Health <= 0 then return end
    flying = true
    FlyButton.Text = "Fly: ON"
    FlyButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
    
    MobileFlyButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
    MobileFlyButton.Text = "FLY ON"
    
    StatusLabel.Text = "Status: Flying"
    StatusLabel.TextColor3 = Color3.fromRGB(100, 200, 255)
    
    local bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    bodyGyro.P = 3000
    bodyGyro.Parent = humanoidRootPart
    
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    bodyVelocity.P = 1250
    bodyVelocity.Parent = humanoidRootPart

    flyConnection = RunService.Heartbeat:Connect(function()
        if not flying or not humanoidRootPart then
            if flying then stopFly() end
            return
        end

        local camera = workspace.CurrentCamera
        if not camera then return end
        
        bodyGyro.CFrame = camera.CFrame

        local moveVector = Vector3.new(
            (control.right - control.left) + mobileMovement.x,
            control.up - control.down,
            (control.forward - control.backward) + mobileMovement.y
        )

        if moveVector.Magnitude > 0 then
            moveVector = moveVector.Unit
            local lookDirection = camera.CFrame.LookVector
            local rightDirection = camera.CFrame.RightVector
            local upDirection = Vector3.new(0, 1, 0)
            
            local direction = (lookDirection * moveVector.Z + rightDirection * moveVector.X + upDirection * moveVector.Y).Unit
            bodyVelocity.Velocity = direction * speed
        else
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        end
    end)
end

local function stopFly()
    if not flying then return end
    flying = false
    FlyButton.Text = "Fly: OFF"
    FlyButton.BackgroundColor3 = Color3.fromRGB(50, 100, 255)
    StatusLabel.Text = "Status: Ready"
    StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    
    MobileFlyButton.BackgroundColor3 = Color3.fromRGB(50, 100, 255)
    MobileFlyButton.Text = "FLY"
    
    if humanoidRootPart then
        for _, child in pairs(humanoidRootPart:GetChildren()) do
            if child:IsA("BodyGyro") or child:IsA("BodyVelocity") then
                child:Destroy()
            end
        end
    end
    
    resetHumanoidState()
    
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
end

local function startNoclip()
    if noclipping then return end
    noclipping = true
    NoclipButton.Text = "Noclip: ON"
    NoclipButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
    StatusLabel.Text = "Status: Noclip"
    StatusLabel.TextColor3 = Color3.fromRGB(255, 150, 255)
    
    pcall(function()
        humanoidRootPart:SetNetworkOwner(player)
    end)
    
    positionHistory = {}
    lastPosition = humanoidRootPart.Position
    
    noclipConnection = RunService.Stepped:Connect(function()
        if not noclipping or not humanoidRootPart then return end
        
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end)
    
    antiPullbackConnection = RunService.Heartbeat:Connect(function()
        if not noclipping or not humanoidRootPart then return end
        
        local moveDir = humanoid.MoveDirection + Vector3.new(mobileMovement.x, 0, mobileMovement.y)
        local isMoving = moveDir.Magnitude > 0.1
        
        if isMoving then
            lastSafePosition = humanoidRootPart.CFrame
            table.insert(positionHistory, humanoidRootPart.CFrame)
            if #positionHistory > maxHistorySize then
                table.remove(positionHistory, 1)
            end
        end
        
        -- Anti Pullback - โหดๆ
        if detectPullback() then
            if isMoving then
                humanoidRootPart.CFrame = lastSafePosition
            end
            
            -- รีเซ็ต velocity ทั้งหมด
            humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
            humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            humanoidRootPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
            
            -- บังคับอัพเดท Network
            for _ = 1, 5 do
                pcall(function()
                    humanoidRootPart:SetNetworkOwner(player)
                end)
            end
            
            -- ผลักตัวออกจากจุดปัญหา
            if moveDir.Magnitude > 0 then
                moveDir = moveDir.Unit
                humanoidRootPart.CFrame = humanoidRootPart.CFrame + (moveDir * 1)
            end
        end
        
        -- ผลักตัวไปข้างหน้า
        if isMoving and not flying then
            moveDir = moveDir.Unit
            local bodyVel = humanoidRootPart:FindFirstChild("NoclipPush")
            if not bodyVel then
                bodyVel = Instance.new("BodyVelocity")
                bodyVel.Name = "NoclipPush"
                bodyVel.MaxForce = Vector3.new(100000, 100000, 100000)
                bodyVel.P = 5000
                bodyVel.D = 500
                bodyVel.Parent = humanoidRootPart
            end
            bodyVel.Velocity = moveDir * 20
            humanoidRootPart.CFrame = humanoidRootPart.CFrame + (moveDir * 0.1)
        else
            local bodyVel = humanoidRootPart:FindFirstChild("NoclipPush")
            if bodyVel then
                bodyVel:Destroy()
            end
        end
    end)
end

local function stopNoclip()
    if not noclipping then return end
    noclipping = false
    NoclipButton.Text = "Noclip: OFF"
    NoclipButton.BackgroundColor3 = Color3.fromRGB(100, 50, 255)
    StatusLabel.Text = "Status: Ready"
    StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    if antiPullbackConnection then
        antiPullbackConnection:Disconnect()
        antiPullbackConnection = nil
    end
    
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and part:IsDescendantOf(character) then
            if part.Name == "Head" or part.Name == "Torso" or part.Name == "HumanoidRootPart" 
                or part.Name:match("Arm") or part.Name:match("Leg") then
                part.CanCollide = true
            end
        end
    end
    
    if humanoidRootPart then
        local noclipPush = humanoidRootPart:FindFirstChild("NoclipPush")
        if noclipPush then
            noclipPush:Destroy()
        end
    end
    
    if not flying then
        resetHumanoidState()
    end
end

-- Button Events
FlyButton.MouseButton1Click:Connect(function()
    if flying then stopFly() else startFly() end
end)

MobileFlyButton.MouseButton1Click:Connect(function()
    if flying then stopFly() else startFly() end
end)

NoclipButton.MouseButton1Click:Connect(function()
    if noclipping then stopNoclip() else startNoclip() end
end)

-- Keyboard Controls (PC)
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    local key = input.KeyCode
    if key == Enum.KeyCode.W then control.forward = 1
    elseif key == Enum.KeyCode.S then control.backward = 1
    elseif key == Enum.KeyCode.A then control.left = 1
    elseif key == Enum.KeyCode.D then control.right = 1
    elseif key == Enum.KeyCode.E then control.up = 1
    elseif key == Enum.KeyCode.Q then control.down = 1
    elseif key == Enum.KeyCode.Space then control.up = 1
    end
end)

UserInputService.InputEnded:Connect(function(input, processed)
    if processed then return end
    local key = input.KeyCode
    if key == Enum.KeyCode.W then control.forward = 0
    elseif key == Enum.KeyCode.S then control.backward = 0
    elseif key == Enum.KeyCode.A then control.left = 0
    elseif key == Enum.KeyCode.D then control.right = 0
    elseif key == Enum.KeyCode.E then control.up = 0
    elseif key == Enum.KeyCode.Q then control.down = 0
    elseif key == Enum.KeyCode.Space then control.up = 0
    end
end)

-- Mobile Touch Movement
local touchActive = {}
local touchStartPos = nil

UserInputService.TouchBegan:Connect(function(touch, processed)
    if UserInputService:GetFocusedTextBox() then return end
    
    local joystickCenterPos = JoystickBG.AbsolutePosition + JoystickBG.AbsoluteSize / 2
    local distToJoystick = (touch.Position - joystickCenterPos).Magnitude
    
    -- ตรวจสอบว่าแตะปุ่มเดินหรือไม่
    if distToJoystick < 80 then
        touchActive[touch.UserInputState] = true
        touchStartPos = touch.Position
    end
end)

UserInputService.TouchMoved:Connect(function(touch, processed)
    if UserInputService:GetFocusedTextBox() then return end
    if not touchActive[touch.UserInputState] or not touchStartPos then return end
    
    local joystickCenterPos = JoystickBG.AbsolutePosition + JoystickBG.AbsoluteSize / 2
    local diff = touch.Position - joystickCenterPos
    local magnitude = diff.Magnitude
    local maxDistance = 50
    
    if magnitude > 5 then
        local angle = math.atan2(diff.Y, diff.X)
        local clampedMag = math.min(magnitude, maxDistance)
        
        mobileMovement.x = math.cos(angle) * (clampedMag / maxDistance)
        mobileMovement.y = -math.sin(angle) * (clampedMag / maxDistance)
        
        -- Update stick position
        local stickDist = math.min(magnitude, maxDistance)
        local stickX = joystickCenterPos.X + math.cos(angle) * stickDist - JoystickBG.AbsolutePosition.X
        local stickY = joystickCenterPos.Y - math.sin(angle) * stickDist - JoystickBG.AbsolutePosition.Y
        
        JoystickStick.Position = UDim2.new(0, stickX - 25, 0, stickY - 25)
    else
        mobileMovement.x = 0
        mobileMovement.y = 0
        JoystickStick.Position = UDim2.new(0.5, -25, 0.5, -25)
    end
end)

UserInputService.TouchEnded:Connect(function(touch, processed)
    if touchActive[touch.UserInputState] then
        touchActive[touch.UserInputState] = nil
        mobileMovement.x = 0
        mobileMovement.y = 0
        touchStartPos = nil
        JoystickStick.Position = UDim2.new(0.5, -25, 0.5, -25)
    end
end)

-- Respawn
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    humanoidRootPart = character:WaitForChild("HumanoidRootPart", 5)
    humanoid = character:WaitForChild("Humanoid", 5)
    positionHistory = {}
    lastPosition = humanoidRootPart.Position
    
    local wasFlying = flying
    local wasNoclipping = noclipping
    
    if wasFlying or wasNoclipping then
        task.wait(0.5)
        if wasNoclipping then startNoclip() end
        if wasFlying then startFly() end
    end
end)

humanoid.WalkSpeed = 16
humanoid.JumpPower = 50

print("Fly & Noclip System loaded!")
